CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(OPENXUM_WS_CPP CXX C)
ENABLE_TESTING()

SET(OPENXUM_WS_CPP_MAJOR 1)
SET(OPENXUM_WS_CPP_MINOR 0)
SET(OPENXUM_WS_CPP_PATCH 0)
SET(OPENXUM_WS_CPP_EXTRA "")
SET(OPENXUM_WS_CPP_VERSION "${OPENXUM_WS_CPP_MAJOR}.${OPENXUM_WS_CPP_MINOR}.${OPENXUM_WS_CPP_PATCH}")
SET(OPENXUM_WS_CPP_VERSION_SHORT "${OPENXUM_WS_CPP_MAJOR}.${OPENXUM_WS_CPP_MINOR}")
SET(OPENXUM_WS_CPP_NAME "openxum-ws-cpp")
SET(OPENXUM_WS_CPP_NAME_VERSION "${OPENXUM_WS_CPP_NAME}-${OPENXUM_WS_CPP_VERSION}")
SET(OPENXUM_WS_CPP_LOCALE_NAME "${OPENXUM_WS_CPP_NAME}-${OPENXUM_WS_CPP_MAJOR}-${OPENXUM_WS_CPP_MINOR}")
IF ("${OPENXUM_WS_CPP_EXTRA}" STREQUAL "")
  SET(OPENXUM_WS_CPP_COMPLETE "${OPENXUM_WS_CPP_MAJOR}.${OPENXUM_WS_CPP_MINOR}.${OPENXUM_WS_CPP_PATCH}")
ELSE ("${OPENXUM_WS_CPP_EXTRA}" STREQUAL "")
  SET(OPENXUM_WS_CPP_COMPLETE "${OPENXUM_WS_CPP_MAJOR}.${OPENXUM_WS_CPP_MINOR}.${OPENXUM_WS_CPP_PATCH}-${OPENXUM_WS_CPP_EXTRA}")
ENDIF ("${OPENXUM_WS_CPP_EXTRA}" STREQUAL "")
SET(OPENXUM_WS_CPP_NAME_COMPLETE "${OPENXUM_WS_CPP_NAME}-${OPENXUM_WS_CPP_COMPLETE}")

#
 # Installation variables
#

SET(OPENXUM_WS_CPP_LIBRARY_DIRS "lib/openxum-ws-cpp-${OPENXUM_WS_CPP_VERSION_SHORT}")
SET(OPENXUM_WS_CPP_INCLUDE_DIRS "include/openxum-ws-cpp-${OPENXUM_WS_CPP_VERSION_SHORT}/openxum-ws-cpp")
SET(OPENXUM_WS_CPP_INCLUDE_DIR "include/openxum-ws-cpp-${OPENXUM_WS_CPP_VERSION_SHORT}")
SET(OPENXUM_WS_CPP_MANPAGE_PATH "share/man/man1")
SET(OPENXUM_WS_CPP_SHARE_DIRS "share/openxum-ws-cpp-${OPENXUM_WS_CPP_VERSION_SHORT}")

#
 # Append the library version information to the library target
 # properties.
#

SET(OPENXUM_WS_CPP_LIBRARY_PROPERTIES VERSION 0)
SET(OPENXUM_WS_CPP_APP_PROPERTIES SOVERSION "${OPENXUM_WS_CPP_MAJOR}.${OPENXUM_WS_CPP_MINOR}"
  VERSION "${OPENXUM_WS_CPP_MAJOR}.${OPENXUM_WS_CPP_MINOR}")

#
# Append debug mode when compiler is GNU.
#

if (CMAKE_BUILD_TYPE STREQUAL "")
  SET(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Choose the type of build" FORCE)
endif ()

if (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang" OR ${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -std=c++11 -pthread")

  if ("${CMAKE_BUILD_TYPE}" EQUAL "Debug" OR "${CMAKE_BUILD_TYPE}" EQUAL "RelWithDebInfo")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ggdb3")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ggdb3")
  endif ()
endif ()

if (CMAKE_BUILD_TYPE STREQUAL "")
  SET(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING "Choose the type of build" FORCE)
endif ()

#
 # Modules
#

INCLUDE(CheckIncludeFileCXX)
INCLUDE(CheckIncludeFile)
INCLUDE(CheckLibraryExists)
INCLUDE(CMakeDetermineCCompiler)

#
 # Check libraries with pkgconfig
#

FIND_PACKAGE(PkgConfig REQUIRED)

#
 # Generate the config.h
#

CHECK_INCLUDE_FILE_CXX(cxxabi.h OPENXUM_WS_CPP_HAVE_GCC_ABI_DEMANGLE)
CHECK_INCLUDE_FILE_CXX(execinfo.h OPENXUM_WS_CPP_HAVE_EXECINFO)
CHECK_INCLUDE_FILE_CXX(signal.h OPENXUM_WS_CPP_HAVE_SIGNAL)
INCLUDE_DIRECTORIES(${OPENXUM_WS_CPP_BINARY_DIR})

#
 # Generate the vle.pc pkg-config file.
 # Build some variable to build a correct Win32 pkg config file with:
 # prefix=/target to detect the DIRNAME
 # cflag=-Iboost_1_34_1 for the directory
#

SET(OPENXUM_WS_CPP_PKGCONFIG_PREFIXPATH "${CMAKE_INSTALL_PREFIX}")
SET(OPENXUM_WS_CPP_PKGCONFIG_BOOSTINCLUDE_DIRS "${Boost_INCLUDE_DIRS}")
SET(OPENXUM_WS_CPP_PKGCONFIG_LIBDIR "lib")

CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/src/openxum-ws-cpp.pc.in
  ${OPENXUM_WS_CPP_BINARY_DIR}/openxum-ws-cpp-${OPENXUM_WS_CPP_VERSION_SHORT}.pc @ONLY)
INSTALL(FILES ${OPENXUM_WS_CPP_BINARY_DIR}/openxum-ws-cpp-${OPENXUM_WS_CPP_VERSION_SHORT}.pc
  DESTINATION lib/pkgconfig)

#
 # Browse the src subdirectory
#

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(test)

#
 # Status
#

MESSAGE(STATUS "- - - -")
MESSAGE(STATUS "${RESTBED_LIBRARIES}")
MESSAGE(STATUS "${OPENXUM_WS_CPP_BINARY_DIR}")
MESSAGE(STATUS "${OPENXUM_WS_CPP_NAME_COMPLETE} configured successfully")
MESSAGE(STATUS "Using ${CMAKE_INSTALL_PREFIX} for installation")
MESSAGE(STATUS "Build type ${CMAKE_BUILD_TYPE}")
IF (OPENXUM_WS_CPP_HAVE_GCC_ABI_DEMANGLE)
  MESSAGE(STATUS "Build with GCC ABI Demangle...: yes")
ENDIF (OPENXUM_WS_CPP_HAVE_GCC_ABI_DEMANGLE)
IF (OPENXUM_WS_CPP_HAVE_EXECINFO)
  MESSAGE(STATUS "Build with execinfo.h.........: yes")
ENDIF (OPENXUM_WS_CPP_HAVE_EXECINFO)
IF (Boost_FOUND)
  MESSAGE(STATUS "Build with boost..............: yes")
ENDIF (Boost_FOUND)
MESSAGE(STATUS "- - - -")

# vim:tw=0:ts=8:tw=0:sw=2:sts=2
